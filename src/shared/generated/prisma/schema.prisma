// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/shared/generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

enum Status {
  ACTIVE
  INACTIVE
  ARCHIVED
}

model User {
  id        String   @id @default(cuid())
  userId    String   @unique @default(cuid()) // This will be the Firebase UID
  version   Int      @default(1)
  status    Status   @default(ACTIVE)
  email     String   @unique
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  boards    Board[]

  @@map("users")
}

model Board {
  id          String    @id @default(cuid())
  boardId     String    @default(cuid()) // Persistent ID for the conceptual board
  version     Int       @default(1)
  status      Status    @default(ACTIVE)
  name        String
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  archivedAt  DateTime?

  lists List[]

  // Relation to the User who owns this board version
  user     User   @relation(fields: [authorId], references: [id])
  authorId String

  @@unique([boardId, version])
  @@index([authorId, status])
  @@map("boards")
}

model List {
  id        String   @id @default(cuid())
  listId    String   @default(cuid()) // Persistent ID for the conceptual list
  version   Int      @default(1)
  status    Status   @default(ACTIVE)
  name      String
  position  Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relation to the Board version this list belongs to
  board   Board  @relation(fields: [boardId], references: [id], onDelete: Cascade)
  boardId String

  cards Card[]

  @@unique([listId, version])
  @@index([boardId, status])
  @@map("lists")
}

model Card {
  id          String    @id @default(cuid())
  cardId      String    @default(cuid()) // Persistent ID for the conceptual card
  version     Int       @default(1)
  status      Status    @default(ACTIVE)
  title       String
  description String?
  position    Float
  dueDate     DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relation to the List version this card belongs to
  list   List   @relation(fields: [listId], references: [id], onDelete: Cascade)
  listId String

  labels     Label[]
  activities Activity[]

  @@unique([cardId, version])
  @@index([listId, status])
  @@map("cards")
}

model Label {
  id     String @id @default(cuid())
  name   String
  color  String
  cardId String
  card   Card   @relation(fields: [cardId], references: [id], onDelete: Cascade)

  @@index([cardId])
  @@map("labels")
}

model Activity {
  id        String   @id @default(cuid())
  type      String // 'comment', 'moved', 'edited', 'created', 'archived'
  content   String?
  cardId    String
  userId    String
  createdAt DateTime @default(now())
  card      Card     @relation(fields: [cardId], references: [id], onDelete: Cascade)

  @@index([cardId])
  @@index([userId])
  @@map("activities")
}
