# Backend-only Dockerfile for DriftBoard
FROM node:22-alpine AS backend-builder

WORKDIR /app

# Copy package files and dependencies
COPY package*.json ./
COPY tsconfig*.json ./
COPY prisma/ ./prisma/
COPY src/shared/ ./src/shared/
COPY src/backend/ ./src/backend/

# Install dependencies and generate Prisma client
RUN npm ci --omit=dev --ignore-scripts
RUN npx prisma generate

# Build backend
RUN npm run build:backend

# Copy generated Prisma client to dist directory
RUN mkdir -p dist/shared/generated && cp -r src/shared/generated/* dist/shared/generated/

# Production stage
FROM node:22-alpine AS runtime

# Install SQLite and OpenSSL 3.x for Prisma 6
RUN apk add --no-cache sqlite openssl3

WORKDIR /app

# Set Prisma environment variables for Alpine Linux
ENV OPENSSL_CONF=/dev/null

# Copy built application
COPY --from=backend-builder /app/dist/backend ./dist/backend/
COPY --from=backend-builder /app/dist/shared ./dist/shared/
COPY --from=backend-builder /app/src/shared ./src/shared/
COPY --from=backend-builder /app/node_modules ./node_modules/
COPY --from=backend-builder /app/prisma ./prisma/

# Create data directory with proper permissions
RUN mkdir -p /app/data && chown -R node:node /app/data

# Switch to non-root user
USER node

# Expose port 3000 (internal port for nginx proxy)
EXPOSE 3000

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD node -e "http.get('http://localhost:3000/api/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })" || exit 1

# Start the application
CMD ["node", "dist/backend/server.js"]
