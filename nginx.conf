# /etc/nginx/conf.d/default.conf

# Define an "upstream" server group for our backend API.
# This makes it easy to reference and even load-balance in the future.
# Docker's internal DNS will resolve the service name 'backend' to the
# correct container's IP address.
upstream backend_api {
    server backend:8000;
}

server {
    # Nginx will listen on port 80 inside the container.
    # The docker-compose.yml file maps host port 8000 to this port.
    listen 80;
    server_name localhost;

    # Rule 1: Serve the static React application for all standard requests.
    location / {
        # The root directory where our static files are located.
        # This path is inside the nginx container.
        root   /usr/share/nginx/html;
        index  index.html index.htm;

        # This is the magic for Single-Page Applications (SPAs) like React.
        # It tells nginx to try finding the requested file ($uri),
        # then a directory ($uri/), and if neither exists,
        # it falls back to serving /index.html. This allows React Router
        # to handle all the page routing on the client-side.
        try_files $uri $uri/ /index.html;
    }

    # Rule 2: Proxy any request starting with /api/ to our backend.
    location /api/ {
        # Pass the request to our defined "backend_api" upstream group.
        proxy_pass http://backend_api;

        # These headers are crucial. They pass along information about the
        # original request to our Express backend, so it knows the true
        # client IP, host, etc.
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # Optional: A good practice to deny access to hidden files.
    location ~ /\.ht {
        deny all;
    }
}
